{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","className","src","alt","type","name","onChange","e","preventDefault","f","target","files","reader","FileReader","onload","result","readedData","XLSX","wsname","SheetNames","ws","Sheets","dataParse","sheet_to_json","header","console","log","readAsBinaryString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRA4CeA,MAvCf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KAuBb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAI,0DAA0DD,UAAU,WAAWE,IAAI,SAC5F,4BACC,2CAHH,0BAME,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,SA5BhB,SAACC,GACpBA,EAAEC,iBAEF,IAA4BC,EAAhBF,EAAEG,OAAOC,MAAiB,GAClCC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUP,GACtB,IAAIR,EAAOQ,EAAEG,OAAOK,OAChBC,EAAaC,OAAUlB,EAAM,CAACK,KAAM,WAClCc,EAASF,EAAWG,WAAW,GAC/BC,EAAKJ,EAAWK,OAAOH,GAGvBI,EAAYL,QAAWM,cAAcH,EAAI,CAACI,OAAO,IACvDC,QAAQC,IAAIJ,GACZtB,EAAQsB,IAEZV,EAAOe,mBAAmBlB,MAarBV,QCzBM6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.db5453a2.chunk.js","sourcesContent":["\nimport './App.css';\nimport React, {useState} from 'react';\nimport * as XLSX from 'xlsx';\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const handleUpload = (e) => {\n    e.preventDefault();\n\n    var files = e.target.files, f = files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n        var data = e.target.result;\n        let readedData = XLSX.read(data, {type: 'binary'});\n        const wsname = readedData.SheetNames[0];\n        const ws = readedData.Sheets[wsname];\n  \n        /* Convert array to json*/\n        const dataParse = XLSX.utils.sheet_to_json(ws, {header:1});\n        console.log(dataParse);\n        setData(dataParse)\n    };\n    reader.readAsBinaryString(f)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"https://octodex.github.com/images/Professortocat_v2.png\" className=\"App-logo\" alt=\"logo\" />\n        <p>\n         <code>Capco</code>\n        </p>\n        Engineering Framework!!\n        <input type=\"file\" name=\"file\" onChange={handleUpload}/>\n        {data}\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}